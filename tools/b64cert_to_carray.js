

const encoded = (`MIIHPDCCBiSgAwIBAgIUdmpGWWpwNF3rEXxAmu9SbrKJwxIwDQYJKoZIhvcNAQEL
BQAwXjELMAkGA1UEBhMCSlAxIzAhBgNVBAoTGkN5YmVydHJ1c3QgSmFwYW4gQ28u
LCBMdGQuMSowKAYDVQQDEyFDeWJlcnRydXN0IEphcGFuIFN1cmVTZXJ2ZXIgQ0Eg
RzQwHhcNMjAwNDI3MjIwMDI4WhcNMjEwNTI3MTQ1OTAwWjB0MQswCQYDVQQGEwJK
UDEOMAwGA1UECBMFVG9reW8xEzARBgNVBAcTCkNoaXlvZGEta3UxIDAeBgNVBAoT
F1lhaG9vIEphcGFuIENvcnBvcmF0aW9uMR4wHAYDVQQDExVzbXRwLm1haWwueWFo
b28uY28uanAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDcnCSi/owX
l2H+nTHGyWRaEsu24PJh37BrnQqsjueaYP/4RTOu+h3xyVfmu23KtjyOFW1nHNgG
qn6XjuGafKt6DjAfdfuY5WuiO8+q4BqmfuD8n1eIZRQarxoClpKzbu6MR04IbdpN
1nbElZXoR44rkR7iKggr/9twyxpt1NFmmx47pEGq0WYiMR7sFKYdV42SyTrE2bCs
kFrKGjmzjSLR08QUfI1jiafRngL6IWi7Ljcdios/pwuSNjJAAWHWQW6YFl1UUe2M
Q5i7NAXJ1zjrWgePcYt9WP3kkYo8UZOrIjnkaFrDhOvJAYGr+jKAuIUHVPs/VDQR
pGuFo4qNu+x7AgMBAAGjggPaMIID1jAMBgNVHRMBAf8EAjAAMGYGA1UdIARfMF0w
UQYJKoMIjJsRARcBMEQwQgYIKwYBBQUHAgEWNmh0dHBzOi8vd3d3LmN5YmVydHJ1
c3QubmUuanAvc3NsL3JlcG9zaXRvcnkvaW5kZXguaHRtbDAIBgZngQwBAgIwIAYD
VR0RBBkwF4IVc210cC5tYWlsLnlhaG9vLmNvLmpwMIGLBggrBgEFBQcBAQR/MH0w
NQYIKwYBBQUHMAGGKWh0dHA6Ly9zc29jc3AuY3liZXJ0cnVzdC5uZS5qcC9PY3Nw
U2VydmVyMEQGCCsGAQUFBzAChjhodHRwOi8vY3JsLmN5YmVydHJ1c3QubmUuanAv
U3VyZVNlcnZlci9vdmNhZzQvb3ZjYWc0LmNydDAOBgNVHQ8BAf8EBAMCBaAwHQYD
VR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1UdIwQYMBaAFGKn0trehbaS
8YW89uiVnXWg+k4fMEYGA1UdHwQ/MD0wO6A5oDeGNWh0dHA6Ly9jcmwuY3liZXJ0
cnVzdC5uZS5qcC9TdXJlU2VydmVyL292Y2FnNC9jZHAuY3JsMB0GA1UdDgQWBBSy
f2txwHbCq21tjrbPgfHIjsSSmzCCAfUGCisGAQQB1nkCBAIEggHlBIIB4QHfAHcA
9lyUL9F3MCIUVBgIMJRWjuNNExkzv98MLyALzE7xZOMAAAFxvexihwAABAMASDBG
AiEA2gDHSP+qKFW1OhAlvw8VmEUg3UPqVdH5HCvG6V/PXn0CIQCCxpB8/HvuDAXF
ET0WJwCqV/0Py8rLsxnvkUjmTM+9aQB1AH0+8viP/4hVaCTCwMqeUol5K8UOeAl/
LmqXaJl+IvDXAAABcb3sar0AAAQDAEYwRAIgNp9dOEPGLLdIbfE/NOXU8a/7ownj
2NxmzCYJ295StY0CIFG3t3lxbt0HR0oZF9ZwFa5xBSCqOlQ4PuQh3g46O91IAHUA
RJRlLrDuzq/EQAfYqP4owNrmgr7YyzG1P9MzlrW2gagAAAFxvexsjAAABAMARjBE
AiAzMa4Qtz3zNdT1af2CFU9huszosWAdTU55kMEe0b7uQwIgXDeslcGsZl5q9Jux
cuqgptufFH3sdfTfi4MuVclN5rUAdgBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOU
sl7m9scOygAAAXG97G+GAAAEAwBHMEUCIQDpkKi/24eX0F2Jyk11IbrnwNJonL/K
c7YF+EgH3qEhHwIgZnKOtqWC0P7iT2c0kzI1SlUA7m9fLTPmwnKOkqi/TlowDQYJ
KoZIhvcNAQELBQADggEBAGClbSuC1xat6r4x+JSbEB1s5+LGzEy9j7I8vGwfouFp
E1jaGPw1uQtghYpwMvJF9/eyURR4iRroJ+STu0IQpKNlFQUPZcYHzg9WXZO6Fqmc
fcFzFQf+hGZD7LV3TCCz+fUVS2g3WzqSXmD0+80n19YqbYQ+wrEG6YGbKJgRgWsj
67gcHzAfTQEaBWZGiDlgJ1xBPS8XAcOm9MJmg/YtIgOh2T8uMVoHHEt3xJR6KRr8
v69vdlqZktPjIPQSerjqelVLiJ/mRk3epDyv0RbVAkHFH0HDD9OLaHxC4jCjytTM
ezl9bmFyeUT88RhxB4IVbbFVXYv7HQU7rqjZMfz8HJc=`);


function toHex(v) {
    return '0x' + (('00' + v.toString(16).toUpperCase()).substr(-2));
}


// const decoded = Buffer.from(encoded, 'base64').toString();

// for (let i=0; i<decoded.length; i++) {
//     let ascii = decoded.charCodeAt(i)
//     console.log(toHex(ascii));
// }

const decoded = Buffer.from(encoded, 'base64');

for (let i=0; i<decoded.length; i++) {
    console.log(toHex(decoded[i]));
}


// console.log(decoded);



